// Generated by Binserde 0.1.0

import {
    Arr,
    Base,
    Bool,
    Enum,
    Int8,
    Int16,
    Int32,
    Int64,
    Int128,
    Option,
    String,
    Uint8,
    Uint16,
    Uint32,
    Uint64,
    Uint128,
    Float32,
    Float64,
    Vec,
} from "bincoder";

export enum BaseDataEnum {
    A,
    B,
    C,
}

export class BaseData extends Enum {
    init() {
        return {
            [BaseDataEnum.A]: new Vec(Uint8),
            [BaseDataEnum.B]: new Uint32(),
            [BaseDataEnum.C]: new Uint64(),
        };
    }
}

export enum BigNumberEnum {
    U64,
    U128,
}

export class BigNumber extends Enum {
    init() {
        return {
            [BigNumberEnum.U64]: new Uint64(),
            [BigNumberEnum.U128]: new Uint128(),
        };
    }
}

export enum AllRoadEnum {
    BaseData,
    BigNumber,
}

export class AllRoad extends Enum {
    init() {
        return {
            [AllRoadEnum.BaseData]: new BaseData(),
            [AllRoadEnum.BigNumber]: new BigNumber(),
        };
    }
}

export class Vehicle extends Base {
    distance: Vec<BaseDataOpt>;
    gas: Vec<BigNumberOpt>;

    constructor(
        distance: Vec<BaseDataOpt> = new Vec(BaseDataOpt),
        gas: Vec<BigNumberOpt> = new Vec(BigNumberOpt),
    ) {
        super();
        this.distance = distance;
        this.gas = gas;
    }
}

export class BaseDataOpt extends Base {
    v: Option<BaseData>;

    constructor(v: Option<BaseData> = new Option(new BaseData())) {
        super();
        this.v = v;
    }
}

export class BigNumberOpt extends Base {
    v: Option<BigNumber>;

    constructor(v: Option<BigNumber> = new Option(new BigNumber())) {
        super();
        this.v = v;
    }
}

export class Garage extends Base {
    car: Vehicle;
    monitor: AllRoad;

    constructor(
        car: Vehicle = new Vehicle(),
        monitor: AllRoad = new AllRoad(),
    ) {
        super();
        this.car = car;
        this.monitor = monitor;
    }
}
