// Generated by Binserde 0.1.0

use bincode::{error, Decode, Encode};
use bincode_macro::Serde;

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug)]
pub enum BaseData {
    A(Vec<u8>),
    B(u32),
    C(u64),
}

impl Default for BaseData {
    fn default() -> Self {
        Self::A(vec![])
    }
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug)]
pub enum BigNumber {
    U64(u64),
    U128(u128),
}

impl Default for BigNumber {
    fn default() -> Self {
        Self::U64(0)
    }
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug)]
pub enum AllRoad {
    BaseData(BaseData),
    BigNumber(BigNumber),
}

impl Default for AllRoad {
    fn default() -> Self {
        Self::BaseData(BaseData::default())
    }
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct Vehicle {
    pub distance: Vec<BaseDataOpt>,
    pub gas:      Vec<BigNumberOpt>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct BaseDataOpt {
    pub v: Option<BaseData>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct BigNumberOpt {
    pub v: Option<BigNumber>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct Garage {
    pub car:     Vehicle,
    pub monitor: AllRoad,
}
