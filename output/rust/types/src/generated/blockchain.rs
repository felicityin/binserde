// Generated by Binserde 0.1.0

use bincode::{error, Decode, Encode};
use bincode_macro::Serde;

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct Script {
    pub code_hash: [u8; 32],
    pub hash_type: u8,
    pub args:      Vec<u8>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct OutPoint {
    pub tx_hash: [u8; 32],
    pub index:   u32,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct CellInput {
    pub since:           u64,
    pub previous_output: OutPoint,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct CellOutput {
    pub capacity: u64,
    pub lock:     Script,
    pub type_:    Option<Script>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct CellDep {
    pub out_point: OutPoint,
    pub dep_type:  u8,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct RawTransaction {
    pub version:      u32,
    pub cell_deps:    Vec<CellDep>,
    pub header_deps:  Vec<Bytes32>,
    pub inputs:       Vec<CellInput>,
    pub outputs:      Vec<CellOutput>,
    pub outputs_data: Vec<Bytes>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct Transaction {
    pub raw:       RawTransaction,
    pub witnesses: Vec<Bytes>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct Bytes {
    pub v: Vec<u8>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct Bytes32 {
    pub v: [u8; 32],
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct RawHeader {
    pub version:           u32,
    pub compact_target:    u32,
    pub timestamp:         u64,
    pub number:            u64,
    pub epoch:             u64,
    pub parent_hash:       [u8; 32],
    pub transactions_root: [u8; 32],
    pub proposals_hash:    [u8; 32],
    pub uncles_hash:       [u8; 32],
    pub dao:               [u8; 32],
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct Header {
    pub raw:   RawHeader,
    pub nonce: u128,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct UncleBlock {
    pub header:    Header,
    pub proposals: Vec<ProposalShortId>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct Block {
    pub header:       Header,
    pub uncles:       Vec<UncleBlock>,
    pub transactions: Vec<Transaction>,
    pub proposals:    Vec<ProposalShortId>,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct ProposalShortId {
    pub v: [u8; 10],
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct CellbaseWitness {
    pub lock:    Script,
    pub message: Bytes,
}

#[derive(Serde, Encode, Decode, PartialEq, Clone, Debug, Default)]
pub struct WitnessArgs {
    pub lock:        Option<Bytes>,
    pub input_type:  Option<Bytes>,
    pub output_type: Option<Bytes>,
}
