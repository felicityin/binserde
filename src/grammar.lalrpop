use crate::parser::ast::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
    _
}

pub Ast: Ast = <decls: (Decl)*> => Ast { <> };

Decl: Decl = {
    Struct => Decl::Struct(<>),
}

Struct: Struct = {
    "struct" <id: Ident> "{" <fields: (<Field> ",")*> "}" => {
        Struct { <> }
    }
}

Field: Field = {
    <id: Ident> ":" <type_: Type> => {
        Field { <> }
    }
}

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Type: Type = {
    BasicType => Type::BasicType(<>),
    ArrayType => Type::ArrayType(<>),
    VecType => Type::VecType(<>),
    <id: Ident> => Type::StructType(<>),
}

ArrayType: ArrayType = {
    "[" <type_: VecItemType> ";" <len: Uint64> "]" => {
        ArrayType { <> }
    }
}

VecType: VecType = {
    "Vec" "<" <type_: VecItemType> ">" => {
        VecType { <> }
    }
}

VecItemType: VecItemType = {
    BasicType => VecItemType::BasicType(<>),
    <id: Ident> => VecItemType::StructType(<>),
}

BasicType: BasicType = {
    "bool" => BasicType::Bool,
    "u8" => BasicType::Uint8,
    "u16" => BasicType::Uint16,
    "u32" => BasicType::Uint32,
    "u64" => BasicType::Uint64,
    "u128" => BasicType::Uint128,
    "i8" => BasicType::Int8,
    "i16" => BasicType::Int16,
    "i32" => BasicType::Int32,
    "i64" => BasicType::Int64,
    "i128" => BasicType::Int128,
    "f32" => BasicType::Float32,
    "f64" => BasicType::Float64,
    "String" => BasicType::String,
}

Uint64: u64 = {
    r"[1-9][0-9]*" => u64::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => u64::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => u64::from_str_radix(&<>[2..], 16).unwrap(),
}
