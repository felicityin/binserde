use crate::parser::ast::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
    _
}

pub Ast: Ast = <decls: (Decl)*> => Ast { <> };

Decl: Decl = {
    Struct => Decl::Struct(<>),
    // Tuple => Decl::Tuple(<>),
}

Struct: Struct = {
    "struct" <id: Ident> "{" <fields: (<Field> ",")*> "}" => {
        Struct { <> }
    }
}

Field: Field = {
    <id: Ident> ":" <type_: Type> => {
        Field { <> }
    }
}

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Type: Type = {
    "bool" => Type::Bool,
    "u8" => Type::Uint8,
    "u16" => Type::Uint16,
    "u32" => Type::Uint32,
    "u64" => Type::Uint64,
    "u128" => Type::Uint128,
    "i8" => Type::Int8,
    "i16" => Type::Int16,
    "i32" => Type::Int32,
    "i64" => Type::Int64,
    "i128" => Type::Int128,
    "f32" => Type::Float32,
    "f64" => Type::Float64,
    "String" => Type::String,
}
